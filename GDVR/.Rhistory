library(geosphere)
#coord 1: 25.16589, 83.00353
#coord 2: 25.28321, 83.01039
#coord 3: 25.28322, 83.01004
distm(c(83.00353,25.16589), c(83.01039,25.28321), fun = distHaversine)
distm(c(83.00353,25.16589), c(83.01004,25.28322), fun = distHaversine)
#coord 1: 25.16589, 83.00353
#coord 2: 25.28321, 83.01039
#coord 3: 25.28322, 83.01004
distm(c(83.00353,25.16589), c(83.01039,25.28321), fun = distVincentyEllipsoid)
distm(c(83.00353,25.16589), c(83.01004,25.28322), fun = distVincentyEllipsoid)
#load sensor data by location
#get & set working directory
#read file name & bind
#location_sensor <- do.call("rbind", lapply(list.files(), read.csv, header = TRUE))
#extract date and replace date column
getwd()
library(chron) #for as.times
library(lubridate) #for extracting date, year, etc
library(ggplot2) #for plotting
library(dplyr)
library(geosphere)
library(osmdata)
library(OpenStreetMap)
library(rJava)
install.packages("osmplotr")
library(osmplotr)
install.packages("ggm")
library(ggmap)
citation("ggmap")
get_openstreetmap(bbox = c(left = -95.80204, bottom = 29.38048, right =
-94.92313, top = 30.14344), scale = 606250)
get_openstreetmap()
library(chron) #for formatting timestamps
library(lubridate) #for extracting dates, years, and months
library(ggmap) #access google base maps using API key
library(ggplot2) #for visualising spatial data
library(dplyr) #for data frame manipulation
library(geosphere) #to calculate distances between two coordinates
library(ggpubr) #for tests of statistical significance
library(rstatix) #for tests of statistical significance
library(fields) #for spatial binning
library(viridis) #for custom color-scales
library(reshape) #for formatting ggplot2() visualisations
library(ggsn)
register_google(key = "AIzaSyAnNLbSleiMIuYn0dt5jYHn1LkfSE241Es")
citation("ggmap") #for attribution guidelines
hist(a)
a <- c(1,2,5,8,100)
hist(a)
hist(log10(a))
a <- c(1,2,5,8,9,2,10,8,6,22,34,56,76,84,100)
hist(a)
hist(log10(a))
a <- c(1,2,5,8,9,2,10,8,6,22,34,56,76,84,100)
hist(a)
hist(log10(a))
binom.test(154,286)
binom.test(132,286)
binom.test(154,286, conf.level = 0.9)
binom.test(132,286, conf.level = 0.9)
binom.test(154,286, conf.level = 0.8)
binom.test(132,286, conf.level = 0.8)
binom.test(154,286, conf.level = 0.75)
binom.test(132,286, conf.level = 0.75)
library(chron)
library(lubridate)
library(dplyr)
library(ggplot2)
setwd("/Users/sabamundlay/Desktop/w2c_uchicago/ppcb_data/prepost_covid")
list.files()
setwd("/Users/sabamundlay/Desktop/w2c_uchicago/ppcb_data/prepost_covid")
list.files()
setwd("/Users/sabamundlay/Desktop/w2c_uchicago/ppcb_data/prepost_covid")
list.files()
#SATLUJ
industries <- read.csv("/Users/sabamundlay/Desktop/w2c_uchicago/ppcb_data_prepost_covid/satluj_industries.csv")
#SATLUJ
getwd()
setwd("/Users/sabamundlay/Desktop")
#SATLUJ
getwd()
setwd("/Users/sabamundlay/Desktop/w2c_uchicago/ppcb_data")
setwd("/Users/sabamundlay/Desktop/w2c_uchicago/ppcb_data/prepost_covid")
list.files()
#SATLUJ
getwd()
setwd("/Users/sabamundlay/Desktop/w2c_uchicago/ppcb_data/prepost_covid")
#SATLUJ
getwd()
library(chron)
library(lubridate)
library(dplyr)
library(ggplot2)
setwd("/Users/sabamundlay/Desktop/w2c_uchicago/ppcb_data/prepost_covid")
list.files()
getwd()
setwd("/Users/sabamundlay/Desktop/w2c_uchicago/ppcb_data/prepost_covid")
getwd()
setwd("/Users/sabamundlay/Desktop/w2c_uchicago/ppcb_data/prepost_covid")
list.files()
#Plot Flow Data
beas_flow <- read.csv("2019-2020flow_beas.csv")
library(chron) #for formatting timestamps
library(lubridate) #for extracting dates, years, and months
library(ggmap) #access google base maps using API key
library(ggplot2) #for visualising spatial data
library(dplyr) #for data frame manipulation
library(geosphere) #to calculate distances between two coordinates
library(ggpubr) #for tests of statistical significance
library(rstatix) #for tests of statistical significance
library(fields) #for spatial binning
library(viridis) #for custom color-scales
library(reshape) #for formatting ggplot2() visualisations
library(ggsn)
register_google(key = "") #replace this with your own API key from google
citation("ggmap") #for attribution guidelines
library(sp)
install.packages("gstat")
library(gstat)
install.packages("gstat")
library(gstat)
library(chron) #for formatting timestamps
library(lubridate) #for extracting dates, years, and months
library(ggmap) #access google base maps using API key
library(ggplot2) #for visualising spatial data
library(dplyr) #for data frame manipulation
library(geosphere) #to calculate distances between two coordinates
library(ggpubr) #for tests of statistical significance
library(rstatix) #for tests of statistical significance
library(fields) #for spatial binning
library(viridis) #for custom color-scales
library(reshape) #for formatting ggplot2() visualisations
library(ggsn) #for producing scalebars
library(sp)
getwd()
setwd("~/Desktop/w2c_uchicago/supratik_paper_code/r_code")
register_google(key = "AIzaSyAnNLbSleiMIuYn0dt5jYHn1LkfSE241Es") #replace this with your own API key from google
#load NRSP data
setwd("~/Desktop/w2c_uchicago/supratik_paper_code/r_code/GDVR/NRSP") #make sure to replace ... with correct, full filepath
getwd()
nrsp_sens <- do.call("rbind", lapply(list.files(), read.csv, header = TRUE))
nrsp_sens$Date <- as.Date(nrsp_sens$Date, format = "%d/%m/%y", origin = "1900-01-01")
nrsp_sens$Time <- format(strptime(nrsp_sens$Time, "%H:%M:%S"),"%H:%M:%S")
nrsp_sens$year <- year(nrsp_sens$Date)
nrsp_sens$mon <- month(nrsp_sens$Date)
names(nrsp_sens) <- c("date", "time", "temp", "pH", "pHmv", "orpmv", "ec", "ecabs", "res", "tds", "sal", "sigma",
"press", "do", "doppm", "turb", "nippm", "nimv", "amppm", "ammv", "chlarfu", "cdomrfu",
"tryprfu", "chlamg", "cdomppb", "trypppb", "lat", "lon", "year", "mon")
#subset narsapur to get only Aug 24, 2017 MORNING
nrsp_aug <- subset(nrsp_sens, ((date == "2017-08-24") & (time <= "12:00:00")))
View(nrsp_aug)
#2D Interpolation (Kriging) for NRSP EC 24/08/2017
#use dataset created earlier nrsp_aug, which has morning data from 24/08/2017
#make one DF with EC only (colums date, time, ec, lat, lon)
nrsp_ec_interpolation <- subset(nrps_aug, c("date", "time", "ec", "lat", "lon"))
#2D Interpolation (Kriging) for NRSP EC 24/08/2017
#use dataset created earlier nrsp_aug, which has morning data from 24/08/2017
#make one DF with EC only (colums date, time, ec, lat, lon)
nrsp_ec_interpolation <- subset(nrsp_aug, c("date", "time", "ec", "lat", "lon"))
#2D Interpolation (Kriging) for NRSP EC 24/08/2017
#use dataset created earlier nrsp_aug, which has morning data from 24/08/2017
#make one DF with EC only (colums date, time, ec, lat, lon)
nrsp_ec_interpolation <- nrsp_aug[,c("date", "time", "ec", "lat", "lon")]
View(nrsp_ec_interpolation)
#make DF with Nitrate only (colums date, time, nippm, lat, lon)
nrsp_ni_interpolation <- nrsp_aug[,c("date", "time", "nippm", "lat", "lon")]
#make one DF with EC only (ec, lat, lon), the autokrige() function assumes that the interprolation is for the first column of data
nrsp_ec_interpolation <- nrsp_aug[,c("ec", "lat", "lon")]
#make DF with Nitrate only (nippm, lat, lon)
nrsp_ni_interpolation <- nrsp_aug[,c("nippm", "lat", "lon")]
View(nrsp_ec_interpolation)
install.packages("automap")
library(automap) #for kriging interpolation
install.packages("intervals")
library(automap) #for kriging interpolation
install.packages("rgdal")
No
install.packages("rgdal")
library(rgdal) #for reading in shapefiles
#load shapefiles from directories, indicating the .shp file in the 'layer' variable
getwd()
nrsp_shp <- readOGR(dsn="/Users/sabamundlay/Desktop/w2c_uchicago/supratik_paper_code/r_code/GDVR/NRSP_SHP", layer="POLYGON")
plot(nrsp_shp)
type(nrsp_shp)
typeof(nrsp_shp)
#make grid over which to interpolate / define the "unknown" points
krig_result <- autoKrige(ec~1, nrsp_ec_interpolation, nrsp_shp)
View(nrsp_ec_interpolation)
coords <- nrsp_ec_interpolation[,c("lat","lon")]
ec_spdf <- SpatialPointsDataFrame(coords = coords, data = nrsp_ec_interpolation)
#make grid over which to interpolate / define the "unknown" points
krig_result <- autoKrige(ec~1, nrsp_ec_interpolation, nrsp_shp)
#make grid over which to interpolate / define the "unknown" points
krig_result <- autoKrige(ec~1, ec_spdf, nrsp_shp)
ec_spdf <- SpatialPointsDataFrame(coords = coords, data = nrsp_ec_interpolation, proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
#make grid over which to interpolate / define the "unknown" points
krig_result <- autoKrige(ec~1, ec_spdf, nrsp_shp)
#convert the dataframe into a spatial points data frame object
ec_spdf <- SpatialPointsDataFrame(coords = nrsp_ec_interpolation[,c("lat","lon")], data = nrsp_ec_interpolation, proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
View(nrsp_shp)
#make grid over which to interpolate / define the "unknown" points (prediction grid)
points(spsample(nrsp_shp, n = 1000, "regular"), pch = 3)
#make grid over which to interpolate / define the "unknown" points (prediction grid)
plot(points(spsample(nrsp_shp, n = 1000, "regular"), pch = 3))
#make grid over which to interpolate / define the "unknown" points (prediction grid)
makegrid(nrsp_shp, n = 1000, nsig = 2)
#make grid over which to interpolate / define the "unknown" points (prediction grid)
plot(makegrid(nrsp_shp, n = 1000, nsig = 2))
#make grid over which to interpolate / define the "unknown" points (prediction grid)
plot(makegrid(nrsp_shp, n = 5000, nsig = 2))
#make grid over which to interpolate / define the "unknown" points (prediction grid)
grid <- makegrid(nrsp_shp, n = 5000, nsig = 2)
#plot the raster (interpolated polygon) using ggmap / clip the prediction grid
clipped <- mask(grid, nrsp_shp)
install.packaa
install.packages("raster")
install.packages("raster")
install.packages("raster")
install.packages("raster")
library(raster) #to clip interpolated grid with a polygon
#plot the raster (interpolated polygon) using ggmap / clip the prediction grid
clipped <- mask(grid, nrsp_shp)
typeof(grid)
View(grid)
View(grid)
View(nrsp_aug)
View(grid)
names(grid) <- c("lon", "lat")
grid <- SpatialPointsDataFrame(coords = grid[,c("lat","lon")], data = grid, proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
#plot the raster (interpolated polygon) using ggmap / clip the prediction grid
clipped <- mask(grid, nrsp_shp)
typeof(nrsp_shp)
#load grid layer (created in QGIS) from directory
getwd()
#load grid layer (created in QGIS) from directory
nrsp_grid <- read.csv("nrsp_interpolated_grid.csv")
#load grid layer (created in QGIS) from directory
nrsp_grid <- read.csv("nrsp_interpolation_grid.csv")
#load grid layer (created in QGIS) from directory
nrsp_grid <- read.csv("nrsp_interpolation_grid.csv")
#load grid layer (created in QGIS) from directory
getwd()
#load grid layer (created in QGIS) from directory
setwd("~/Desktop/w2c_uchicago/supratik_paper_code/r_code/GDVR")
nrsp_grid <- read.csv("nrsp_interpolation_grid.csv")
View(nrsp_grid)
plot(nrsp_grid)
#interpolation process
krig_result <- autoKrige(ec~1, ec_spdf, nrsp_grid)
library(automap) #for kriging interpolation
#interpolation process
krig_result <- autoKrige(ec~1, ec_spdf, nrsp_grid)
typeof(ec_spdf)
typeof(nrsp_grid)
#load NRSP grid layer (created in QGIS) from directory
setwd("~/Desktop/w2c_uchicago/supratik_paper_code/r_code/GDVR")
#load NRSP grid layer (created in QGIS) from directory
nrsp_grid <- readOGR(dsn="~/Desktop/w2c_uchicago/supratik_paper_code/r_code/GDVR/nrsp_clipped_shp",layer="nrsp_shp")
library(rgdal) #for reading in shapefiles
#load NRSP grid layer (created in QGIS) from directory
nrsp_grid <- readOGR(dsn="~/Desktop/w2c_uchicago/supratik_paper_code/r_code/GDVR/nrsp_clipped_shp",layer="nrsp_shp")
setwd("~/Desktop/w2c_uchicago/supratik_paper_code/r_code/GDVR")
#load NRSP grid layer (created in QGIS) from directory
nrsp_grid <- read.csv("NRSP_CLIPPED_GRID.csv")
typeof(nrsp_grid)
View(nrsp_grid)
install.packages("sf")
library(sf) #for reading shapefiles
setwd("~/Desktop/w2c_uchicago/supratik_paper_code/r_code/GDVR")
#load NRSP grid layer (created in QGIS) from directory
#nrsp_grid <- read.csv("NRSP_CLIPPED_GRID.csv")
#typeof(nrsp_grid)
nrsp_grid <- st_read("NRSP_SHP.shp")
typeof(nrsp_grid)
#load NRSP grid layer (created in QGIS) from directory
#nrsp_grid <- read.csv("NRSP_CLIPPED_GRID.csv")
#typeof(nrsp_grid)
nrsp_grid <- st_read("NRSP_SHP.shp") #comes in as mercator projection
#load NRSP grid layer (created in QGIS) from directory
#nrsp_grid <- read.csv("NRSP_CLIPPED_GRID.csv")
#typeof(nrsp_grid)
nrsp_grid <- st_read("NRSP_SHP.shp") #comes in as mercator projection
#interpolation process
krig_result <- autoKrige(ec~1, ec_spdf, nrsp_grid)
View(nrsp_grid)
typeof(nrsp_grid)
#load NRSP grid layer (created in QGIS) from directory
#nrsp_grid <- read.csv("NRSP_CLIPPED_GRID.csv")
#typeof(nrsp_grid)
nrsp_grid <- st_read("NRSP_SHP.shp") #comes in as mercator projection
