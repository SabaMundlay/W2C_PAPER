library(rstatix) #for tests of statistical significance
library(fields) #for spatial binning
library(intervals) #for kriging interpolation
library(automap) #for kriging interpolation
library(moments) #for quantifying skew in distribution
library(gstat) #for kriging interpolation
library(maptools)
#API access
register_google(key = "AIzaSyAnNLbSleiMIuYn0dt5jYHn1LkfSE241Es") #replace this with your own API key from google
#load NRSP data
setwd("~/Desktop/w2c_uchicago/supratik_paper_code/r_code/GDVR/NRSP") #make sure to replace ... with correct, full filepath
nrsp_sens <- do.call("rbind", lapply(list.files(), read.csv, header = TRUE))
nrsp_sens$Date <- as.Date(nrsp_sens$Date, format = "%d/%m/%y", origin = "1900-01-01")
nrsp_sens$Time <- format(strptime(nrsp_sens$Time, "%H:%M:%S"),"%H:%M:%S")
nrsp_sens$year <- year(nrsp_sens$Date)
nrsp_sens$mon <- month(nrsp_sens$Date)
names(nrsp_sens) <- c("date", "time", "temp", "pH", "pHmv", "orpmv", "ec", "ecabs", "res", "tds", "sal", "sigma",
"press", "do", "doppm", "turb", "nippm", "nimv", "amppm", "ammv", "chlarfu", "cdomrfu",
"tryprfu", "chlamg", "cdomppb", "trypppb", "lat", "lon", "year", "mon")
nrsp_aug <- subset(nrsp_sens, date == "2017-08-24")
#use dataset created earlier nrsp_aug, which has morning data from 24/08/2017
#make one DF with EC only (ec, lat, lon), the autokrige() function assumes that the interprolation is for the first column of data
nrsp_ec_interpolation <- nrsp_aug[,c("ec", "lat", "lon")]
summary(nrsp_ec_interpolation) #helps us see the min / max EC values.
#remove these observations as they are likely sensor errors
nrsp_ec_interpolation <- subset(nrsp_ec_interpolation, (ec != 0 & ec != 34))
summary(nrsp_ec_interpolation) #helps us see the min / max EC values.
#input data needs to be SpatialPointsDataFrame with projected coordinates
crs(nrsp_ec_interpolation) #in lat / lon format
coords <- nrsp_ec_interpolation[,c(3,2)] #store lat & lon coordinates (lon is x, and lat is y)
#input data needs to be SpatialPointsDataFrame with projected coordinates
crs(nrsp_ec_interpolation) #in lat / lon format
nrsp_spdf <- SpatialPointsDataFrame(coords = coords, data = nrsp_ec_interpolation, proj4string = CRS("+init=epsg:7755")) #this is the EPSG projection for India
coordinates(nrsp_spdf)
#make a rectangular grid from the input data
nrsp_grid <- spsample(nrsp_spdf, type = "regular", cellsize = c(0.001,0.001)) #cellsize determines resolution
gridded(nrsp_grid) = TRUE
plot(nrsp_grid)
krig <- autoKrige(nrsp_spdf, nrsp_grid) #interpolation
t <- krig$krige_output #tells us the predicted parameter, the variance, and the stdev
t <- as.data.frame(t)
nrsp_poly <- readOGR(dsn = "~/Desktop/w2c_uchicago/supratik_paper_code/r_code/GDVR/layers", layer = "POLYGON")
#rasterize the interpolated output & the polygon shapefile of NRSP
krig_raster <- raster(krig$krige_output)
nrsp_raster <- raster(nrsp_poly)
clipped_raster <- mask(krig_raster, nrsp_poly) #clip the interpolated area
k <- rasterToPoints(clipped_raster) #convert back into spatialPoints
#plot with ggmap() + geom_tile() accepts only data frames
k <- as.data.frame(k)
names(k) <- c("lon", "lat", "pred")
map <- get_map(location = c(lon = 81.71, lat = 16.435), source = "google", zoom = 15, maptype = "satellite")
ggmap(map)
ggmap(map) +
#scalebar
ggsn::scalebar(x.min = 81.699, x.max = 81.711,
y.min = 16.4225, y.max = 16.4350,
dist = 0.5, dist_unit = "km", transform = TRUE, model = 'WGS84',
box.fill = "white",
box.color = "#78909c",
st.color = "white",
location = "bottomright",
height = 0.04,
st.size = 6) +
#add interpolated data
geom_tile(data = k, aes(x = lon, y = lat, fill = pred)) +
scale_fill_viridis(limits = c(0,720), breaks = c(0,120,240,360,480,600,720), name = "",
option = "plasma", begin = 0.2) + #make sure to edit the scaale here
#scale_fill_viridis(limits = c(0,3), breaks = c(0,0.5,1,1.5,2,2.5,3), name = "",
#                    option = "plasma", begin = 0.2) +
xlab("") + ylab("") +
theme(legend.direction = "horizontal",
legend.position = "bottom",
legend.key.width = unit(4,"cm"),
legend.margin = margin(10,0,0,0), #top, right, bottom, left
legend.justification = "left",
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
text = element_text(family = "Arial"),
legend.text = element_text(size = 20)) +
guides(size = FALSE)
ggmap(map) +
#scalebar
ggsn::scalebar(x.min = 81.699, x.max = 81.711,
y.min = 16.4225, y.max = 16.4350,
dist = 0.5, dist_unit = "km", transform = TRUE, model = 'WGS84',
box.fill = "white",
box.color = "#78909c",
st.color = "white",
location = "bottomright",
height = 0.04,
st.size = 6) +
#add interpolated data
geom_tile(data = k, aes(x = lon, y = lat, fill = pred)) +
scale_fill_viridis(limits = c(50,650), breaks = c(50,150,250,350,450,550,650), name = "",
option = "plasma", begin = 0.2) + #make sure to edit the scaale here
#scale_fill_viridis(limits = c(0,3), breaks = c(0,0.5,1,1.5,2,2.5,3), name = "",
#                    option = "plasma", begin = 0.2) +
xlab("") + ylab("") +
theme(legend.direction = "horizontal",
legend.position = "bottom",
legend.key.width = unit(4,"cm"),
legend.margin = margin(10,0,0,0), #top, right, bottom, left
legend.justification = "left",
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
text = element_text(family = "Arial"),
legend.text = element_text(size = 20)) +
guides(size = FALSE)
#subset narsapur to get only Aug 24, 2017 MORNING
nrsp_aug <- subset(nrsp_sens, ((date == "2017-08-24") & (time <= "12:00:00")))
#use dataset created earlier nrsp_aug, which has morning data from 24/08/2017
#make one DF with EC only (ec, lat, lon), the autokrige() function assumes that the interprolation is for the first column of data
nrsp_ec_interpolation <- nrsp_aug[,c("ec", "lat", "lon")]
#remove these observations as they are likely sensor errors
nrsp_ec_interpolation <- subset(nrsp_ec_interpolation, (ec != 0 & ec != 34))
#input data needs to be SpatialPointsDataFrame with projected coordinates
coords <- nrsp_ec_interpolation[,c(3,2)] #store lat & lon coordinates (lon is x, and lat is y)
nrsp_spdf <- SpatialPointsDataFrame(coords = coords, data = nrsp_ec_interpolation, proj4string = CRS("+init=epsg:7755")) #this is the EPSG projection for India
#make a rectangular grid from the input data
nrsp_grid <- spsample(nrsp_spdf, type = "regular", cellsize = c(0.001,0.001)) #cellsize determines resolution
gridded(nrsp_grid) = TRUE
krig <- autoKrige(nrsp_spdf, nrsp_grid) #interpolation
t <- krig$krige_output #tells us the predicted parameter, the variance, and the stdev
t <- as.data.frame(t)
#rasterize the interpolated output & the polygon shapefile of NRSP
krig_raster <- raster(krig$krige_output)
nrsp_raster <- raster(nrsp_poly)
clipped_raster <- mask(krig_raster, nrsp_poly) #clip the interpolated area
k <- rasterToPoints(clipped_raster) #convert back into spatialPoints
#plot with ggmap() + geom_tile() accepts only data frames
k <- as.data.frame(k)
names(k) <- c("lon", "lat", "pred")
ggmap(map) +
#scalebar
ggsn::scalebar(x.min = 81.699, x.max = 81.711,
y.min = 16.4225, y.max = 16.4350,
dist = 0.5, dist_unit = "km", transform = TRUE, model = 'WGS84',
box.fill = "white",
box.color = "#78909c",
st.color = "white",
location = "bottomright",
height = 0.04,
st.size = 6) +
#add interpolated data
geom_tile(data = k, aes(x = lon, y = lat, fill = pred)) +
scale_fill_viridis(limits = c(50,650), breaks = c(50,150,250,350,450,550,650), name = "",
option = "plasma", begin = 0.2) + #make sure to edit the scaale here
#scale_fill_viridis(limits = c(0,3), breaks = c(0,0.5,1,1.5,2,2.5,3), name = "",
#                    option = "plasma", begin = 0.2) +
xlab("") + ylab("") +
theme(legend.direction = "horizontal",
legend.position = "bottom",
legend.key.width = unit(4,"cm"),
legend.margin = margin(10,0,0,0), #top, right, bottom, left
legend.justification = "left",
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
text = element_text(family = "Arial"),
legend.text = element_text(size = 20)) +
guides(size = FALSE)
ggmap(map) +
#scalebar
ggsn::scalebar(x.min = 81.699, x.max = 81.711,
y.min = 16.4225, y.max = 16.4350,
dist = 0.5, dist_unit = "km", transform = TRUE, model = 'WGS84',
box.fill = "white",
box.color = "#78909c",
st.color = "white",
location = "bottomright",
height = 0.04,
st.size = 6) +
#add interpolated data
geom_tile(data = k, aes(x = lon, y = lat, fill = pred)) +
scale_fill_viridis(limits = c(0,960), breaks = c(0,120,240,360,480,600,720,840,960), name = "",
option = "plasma", begin = 0.2) + #make sure to edit the scaale here
#scale_fill_viridis(limits = c(0,3), breaks = c(0,0.5,1,1.5,2,2.5,3), name = "",
#                    option = "plasma", begin = 0.2) +
xlab("") + ylab("") +
theme(legend.direction = "horizontal",
legend.position = "bottom",
legend.key.width = unit(4,"cm"),
legend.margin = margin(10,0,0,0), #top, right, bottom, left
legend.justification = "left",
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
text = element_text(family = "Arial"),
legend.text = element_text(size = 20)) +
guides(size = FALSE)
#make DF with Nitrate only (nippm, lat, lon)
nrsp_ni_interpolation <- nrsp_aug[,c("nippm", "lat", "lon")]
summary(nrsp_ni_interpolation$nippm) #need to remove NAs
nrsp_ni_interpolation <- nrsp_ni_interpolation[complete.cases(nrsp_ni_interpolation), ]
coords <- nrsp_ni_interpolation[,c(3,2)] #store lat & lon coordinates (lon is x, and lat is y)
nrsp_spdf <- SpatialPointsDataFrame(coords = coords, data = nrsp_ni_interpolation, proj4string = CRS("+init=epsg:7755")) #this is the EPSG projection for India
#make a rectangular grid from the input data
nrsp_grid <- spsample(nrsp_spdf, type = "regular", cellsize = c(0.001,0.001)) #cellsize determines resolution
gridded(nrsp_grid) = TRUE
#kriging interpolation
krig <- autoKrige(nrsp_spdf, nrsp_grid) #interpolation
summary(krig$krige_output)
t <- krig$krige_output #tells us the predicted parameter, the variance, and the stdev
t <- as.data.frame(t)
#rasterize the interpolated output & the polygon shapefile of NRSP
krig_raster <- raster(krig$krige_output)
nrsp_raster <- raster(nrsp_poly)
clipped_raster <- mask(krig_raster, nrsp_poly) #clip the interpolated area
k <- rasterToPoints(clipped_raster) #convert back into spatialPoints
#plot with ggmap() + geom_tile() accepts only data frames
k <- as.data.frame(k)
names(k) <- c("lon", "lat", "pred")
summary(k)
ggmap(map) +
#scalebar
ggsn::scalebar(x.min = 81.699, x.max = 81.711,
y.min = 16.4225, y.max = 16.4350,
dist = 0.5, dist_unit = "km", transform = TRUE, model = 'WGS84',
box.fill = "white",
box.color = "#78909c",
st.color = "white",
location = "bottomright",
height = 0.04,
st.size = 6) +
#add interpolated data
geom_tile(data = k, aes(x = lon, y = lat, fill = pred)) +
#scale_fill_viridis(limits = c(0,960), breaks = c(0,120,240,360,480,600,720,840,960), name = "",
#                   option = "plasma", begin = 0.2) + #make sure to edit the scaale here
scale_fill_viridis(limits = c(0,3), breaks = c(0,0.5,1,1.5,2,2.5,3), name = "",
option = "plasma", begin = 0.2) +
xlab("") + ylab("") +
theme(legend.direction = "horizontal",
legend.position = "bottom",
legend.key.width = unit(4,"cm"),
legend.margin = margin(10,0,0,0), #top, right, bottom, left
legend.justification = "left",
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
text = element_text(family = "Arial"),
legend.text = element_text(size = 20)) +
guides(size = FALSE)
ggmap(map) +
#scalebar
ggsn::scalebar(x.min = 81.699, x.max = 81.711,
y.min = 16.4225, y.max = 16.4350,
dist = 0.5, dist_unit = "km", transform = TRUE, model = 'WGS84',
box.fill = "white",
box.color = "#78909c",
st.color = "white",
location = "bottom",
height = 0.04,
st.size = 6) +
#add interpolated data
geom_tile(data = k, aes(x = lon, y = lat, fill = pred)) +
#scale_fill_viridis(limits = c(0,960), breaks = c(0,120,240,360,480,600,720,840,960), name = "",
#                   option = "plasma", begin = 0.2) + #make sure to edit the scaale here
scale_fill_viridis(limits = c(0,3), breaks = c(0,0.5,1,1.5,2,2.5,3), name = "",
option = "plasma", begin = 0.2) +
xlab("") + ylab("") +
theme(legend.direction = "horizontal",
legend.position = "bottom",
legend.key.width = unit(4,"cm"),
legend.margin = margin(10,0,0,0), #top, right, bottom, left
legend.justification = "left",
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
text = element_text(family = "Arial"),
legend.text = element_text(size = 20)) +
guides(size = FALSE)
(
ggmap(map) +
#scalebar
ggsn::scalebar(x.min = 81.699, x.max = 81.711,
y.min = 16.4225, y.max = 16.4350,
dist = 0.5, dist_unit = "km", transform = TRUE, model = 'WGS84',
box.fill = "white",
box.color = "#78909c",
st.color = "white",
location = "bottom",
height = 0.04,
st.size = 6) +
#add interpolated data
geom_tile(data = k, aes(x = lon, y = lat, fill = pred)) +
#scale_fill_viridis(limits = c(0,960), breaks = c(0,120,240,360,480,600,720,840,960), name = "",
#                   option = "plasma", begin = 0.2) + #make sure to edit the scaale here
scale_fill_viridis(limits = c(0,3), breaks = c(0,0.5,1,1.5,2,2.5,3), name = "",
option = "plasma", begin = 0.2) +
xlab("") + ylab("") +
theme(legend.direction = "horizontal",
legend.position = "bottom",
legend.key.width = unit(4,"cm"),
legend.margin = margin(10,0,0,0), #top, right, bottom, left
legend.justification = "left",
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
text = element_text(family = "Arial"),
legend.text = element_text(size = 20)) +
guides(size = FALSE)
summary(nrsp_ni_interpolation$nippm)
summary(k$pred)
#input data needs to be SpatialPointsDataFrame with projected coordinates
coords <- nrsp_ec_interpolation[,c(3,2)] #store lat & lon coordinates (lon is x, and lat is y)
nrsp_spdf <- SpatialPointsDataFrame(coords = coords, data = nrsp_ec_interpolation, proj4string = CRS("+init=epsg:7755")) #this is the EPSG projection for India
#make a rectangular grid from the input data
nrsp_grid <- spsample(nrsp_spdf, type = "regular", cellsize = c(0.001,0.001)) #cellsize determines resolution
gridded(nrsp_grid) = TRUE
#kriging interpolation
krig <- autoKrige(nrsp_spdf, nrsp_grid) #interpolation
t <- krig$krige_output #tells us the predicted parameter, the variance, and the stdev
t <- as.data.frame(t)
#load polygon shapefile
#nrsp_poly <- readOGR(dsn = "~/Desktop/w2c_uchicago/supratik_paper_code/r_code/GDVR/nrsp_polygon_shp", layer = "POLYGON")
nrsp_poly <- readOGR(dsn = "~/Desktop/w2c_uchicago/supratik_paper_code/r_code/GDVR/nrsp_poly, layer = "POLYGON")
#rasterize the interpolated output & the polygon shapefile of NRSP
krig_raster <- raster(krig$krige_output)
nrsp_raster <- raster(nrsp_poly)
clipped_raster <- mask(krig_raster, nrsp_poly) #clip the interpolated area
k <- rasterToPoints(clipped_raster) #convert back into spatialPoints
#plot with ggmap() + geom_tile() accepts only data frames
k <- as.data.frame(k)
names(k) <- c("lon", "lat", "pred")
summary(k)
#ZOOMED IN 2D MAP
#map <- get_map(location = c(lon = 81.705, lat = 16.429), source = "google", zoom = 16, maptype = "satellite")
#ggmap(map)
map <- get_map(location = c(lon = 81.71, lat = 16.435), source = "google", zoom = 15, maptype = "satellite")
ggmap(map)
ggmap(map) +
#scalebar
ggsn::scalebar(x.min = 81.699, x.max = 81.711,
y.min = 16.4225, y.max = 16.4350,
dist = 0.5, dist_unit = "km", transform = TRUE, model = 'WGS84',
box.fill = "white",
box.color = "#78909c",
#load polygon shapefile
#nrsp_poly <- readOGR(dsn = "~/Desktop/w2c_uchicago/supratik_paper_code/r_code/GDVR/nrsp_polygon_shp", layer = "POLYGON")
nrsp_poly <- readOGR(dsn = "~/Desktop/w2c_uchicago/supratik_paper_code/r_code/GDVR/nrsp_poly", layer = "POLYGON")
#rasterize the interpolated output & the polygon shapefile of NRSP
krig_raster <- raster(krig$krige_output)
nrsp_raster <- raster(nrsp_poly)
clipped_raster <- mask(krig_raster, nrsp_poly) #clip the interpolated area
k <- rasterToPoints(clipped_raster) #convert back into spatialPoints
#plot with ggmap() + geom_tile() accepts only data frames
k <- as.data.frame(k)
names(k) <- c("lon", "lat", "pred")
summary(k)
map <- get_map(location = c(lon = 81.71, lat = 16.435), source = "google", zoom = 15, maptype = "satellite")
ggmap(map) +
#scalebar
ggsn::scalebar(x.min = 81.699, x.max = 81.711,
y.min = 16.4225, y.max = 16.4350,
dist = 0.5, dist_unit = "km", transform = TRUE, model = 'WGS84',
box.fill = "white",
box.color = "#78909c",
st.color = "white",
location = "bottomright",
height = 0.04,
st.size = 6) +
#add interpolated data
geom_tile(data = k, aes(x = lon, y = lat, fill = pred)) +
#scale_fill_viridis(limits = c(0,960), breaks = c(0,120,240,360,480,600,720,840,960), name = "",
#                   option = "plasma", begin = 0.2) + #make sure to edit the scaale here
scale_fill_viridis(limits = c(0,3), breaks = c(0,0.5,1,1.5,2,2.5,3), name = "",
option = "plasma", begin = 0.2) +
xlab("") + ylab("") +
theme(legend.direction = "horizontal",
legend.position = "bottom",
legend.key.width = unit(4,"cm"),
legend.margin = margin(10,0,0,0), #top, right, bottom, left
legend.justification = "left",
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
text = element_text(family = "Arial"),
legend.text = element_text(size = 20)) +
guides(size = FALSE)
ggmap(map) +
#scalebar
ggsn::scalebar(x.min = 81.699, x.max = 81.711,
y.min = 16.4225, y.max = 16.4350,
dist = 0.5, dist_unit = "km", transform = TRUE, model = 'WGS84',
box.fill = "white",
box.color = "#78909c",
st.color = "white",
location = "bottomright",
height = 0.04,
st.size = 6) +
#add interpolated data
geom_tile(data = k, aes(x = lon, y = lat, fill = pred)) +
scale_fill_viridis(limits = c(0,960), breaks = c(0,120,240,360,480,600,720,840,960), name = "",
option = "plasma", begin = 0.2) + #make sure to edit the scaale here
#scale_fill_viridis(limits = c(0,3), breaks = c(0,0.5,1,1.5,2,2.5,3), name = "",
#                    option = "plasma", begin = 0.2) +
xlab("") + ylab("") +
theme(legend.direction = "horizontal",
legend.position = "bottom",
legend.key.width = unit(4,"cm"),
legend.margin = margin(10,0,0,0), #top, right, bottom, left
legend.justification = "left",
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
text = element_text(family = "Arial"),
legend.text = element_text(size = 20)) +
guides(size = FALSE)
map <- get_map(location = c(lon = 81.71, lat = 16.435), source = "google", zoom = 14, maptype = "satellite")
ggmap(map)
ggmap(map) +
#scalebar
ggsn::scalebar(x.min = 81.69, x.max = 81.73,
y.min = 16.41, y.max = 16.46,
dist = 0.5, dist_unit = "km", transform = TRUE, model = 'WGS84',
box.fill = "white",
box.color = "#78909c",
st.color = "white",
location = "bottomright",
height = 0.04,
st.size = 6) +
#add interpolated data
geom_tile(data = k, aes(x = lon, y = lat, fill = pred)) +
scale_fill_viridis(limits = c(0,960), breaks = c(0,120,240,360,480,600,720,840,960), name = "",
option = "plasma", begin = 0.2) + #make sure to edit the scaale here
#scale_fill_viridis(limits = c(0,3), breaks = c(0,0.5,1,1.5,2,2.5,3), name = "",
#                    option = "plasma", begin = 0.2) +
xlab("") + ylab("") +
theme(legend.direction = "horizontal",
legend.position = "bottom",
legend.key.width = unit(4,"cm"),
legend.margin = margin(10,0,0,0), #top, right, bottom, left
legend.justification = "left",
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
text = element_text(family = "Arial"),
legend.text = element_text(size = 20)) +
guides(size = FALSE)
which.max(nrsp_aug$ec)
which.max(nrsp_aug$nippm)
nrsp_aug[36,]
nrsp_aug[750,]
View(nrsp_aug)
subset(nrsp_aug, (time >- "08:35:00" & time <= 08:45:00))
subset(nrsp_aug, (time >- "08:35:00" & time <= "08:45:00"))
subset(nrsp_aug, (time >= "08:35:00" & time <= "08:45:00"))
temp <- subset(nrsp_aug, (time >= "08:35:00" & time <= "08:45:00"))
summary(temp)
plot(nrsp_aug$time, nrsp_aug$ec)
ggplot(data = nrsp_aug)+
geom_line(aes(x = time, y = ec))
ggplot(data = nrsp_aug)+
geom_point(aes(x = time, y = ec))
ggplot(data = nrsp_aug) +
geom_point(aes(x = time, y = ec)) +
geom_point(aes(x = time, y = nippm), color = "blue")
ggplot(data = nrsp_aug) +
geom_point(aes(x = time, y = ec)) +
geom_point(aes(x = time, y = nippm*100), color = "blue")
ggplot(data = nrsp_aug) +
geom_point(aes(x = as.numeric(time), y = ec)) +
geom_point(aes(x = time, y = nippm*100), color = "blue")
ggplot(data = nrsp_aug) +
geom_point(aes(x = time, y = ec)) +
geom_point(aes(x = time, y = nippm*100), color = "blue")
remove(temp)
remove(map)
cor(nrsp_aug$ec, nrsp_aug$nippm)
cor(nrsp_aug$ec, nrsp_aug$nippm, na.rm = TRUE)
cor(nrsp_aug$ec, nrsp_aug$nippm, use = "complete.obs")
cor(nrsp_aug$ec, nrsp_aug$nippm, use = "everything")
cor(nrsp_aug$ec, nrsp_aug$nippm, use = "all.obs")
glm(nrsp_aug$ec ~ nrsp_aug$nippm)
summary(glm(nrsp_aug$ec ~ nrsp_aug$nippm))
summary(lm(nrsp_aug$ec ~ nrsp_aug$nippm))
ggplot(data = nrsp_aug) +
geom_point(aes(x = lon, y = lat, color = ec))
ggplot(data = nrsp_aug) +
geom_point(aes(x = lon, y = lat, color = ec, size = nippm))
nrsp_aug$nippm >= 2.5
summary(nrsp_aug$nippm >= 2.5)
summary(subset(nrsp_aug, nippm >= 2.5))
ggplot(data = nrsp_aug) +
geom_point(aes(x = lon, y = nippm))
ggplot(data = nrsp_aug) +
geom_point(aes(x = lon, y = nippm*100)) +
geom_point(aes(x = lon, y = ec), color = blue)
ggplot(data = nrsp_aug) +
geom_point(aes(x = lon, y = nippm*100)) +
geom_point(aes(x = lon, y = ec), color = "blue")
ggplot(data = nrsp_aug) +
geom_point(aes(x = lon, y = nippm*150)) +
geom_point(aes(x = lon, y = ec), color = "blue")
ggplot(data = nrsp_aug) +
geom_point(aes(x = lon, y = nippm*10)) +
geom_point(aes(x = lon, y = ec), color = "blue") +
ylim(c(0,250))
ggplot(data = nrsp_aug) +
geom_point(aes(x = lon, y = nippm*100)) +
geom_point(aes(x = lon, y = ec), color = "blue") +
ylim(c(0,250))
ggplot(data = nrsp_aug) +
geom_point(aes(x = lon, y = nippm*100)) +
geom_point(aes(x = lon, y = ec), color = "blue") +
ylim(c(100,250))
ggplot(data = nrsp_aug) +
geom_point(aes(x = lon, y = nippm*100),color = "blue") +
geom_point(aes(x = lon, y = ec)) +
ylim(c(100,250))
