library(geosphere)
#coord 1: 25.16589, 83.00353
#coord 2: 25.28321, 83.01039
#coord 3: 25.28322, 83.01004
distm(c(83.00353,25.16589), c(83.01039,25.28321), fun = distHaversine)
distm(c(83.00353,25.16589), c(83.01004,25.28322), fun = distHaversine)
#coord 1: 25.16589, 83.00353
#coord 2: 25.28321, 83.01039
#coord 3: 25.28322, 83.01004
distm(c(83.00353,25.16589), c(83.01039,25.28321), fun = distVincentyEllipsoid)
distm(c(83.00353,25.16589), c(83.01004,25.28322), fun = distVincentyEllipsoid)
#load sensor data by location
#get & set working directory
#read file name & bind
#location_sensor <- do.call("rbind", lapply(list.files(), read.csv, header = TRUE))
#extract date and replace date column
getwd()
library(chron) #for as.times
library(lubridate) #for extracting date, year, etc
library(ggplot2) #for plotting
library(dplyr)
library(geosphere)
library(osmdata)
library(OpenStreetMap)
library(rJava)
install.packages("osmplotr")
library(osmplotr)
install.packages("ggm")
library(ggmap)
citation("ggmap")
get_openstreetmap(bbox = c(left = -95.80204, bottom = 29.38048, right =
-94.92313, top = 30.14344), scale = 606250)
get_openstreetmap()
library(chron) #for formatting timestamps
library(lubridate) #for extracting dates, years, and months
library(ggmap) #access google base maps using API key
library(ggplot2) #for visualising spatial data
library(dplyr) #for data frame manipulation
library(geosphere) #to calculate distances between two coordinates
library(ggpubr) #for tests of statistical significance
library(rstatix) #for tests of statistical significance
library(fields) #for spatial binning
library(viridis) #for custom color-scales
library(reshape) #for formatting ggplot2() visualisations
library(ggsn)
register_google(key = "AIzaSyAnNLbSleiMIuYn0dt5jYHn1LkfSE241Es")
citation("ggmap") #for attribution guidelines
hist(a)
a <- c(1,2,5,8,100)
hist(a)
hist(log10(a))
a <- c(1,2,5,8,9,2,10,8,6,22,34,56,76,84,100)
hist(a)
hist(log10(a))
a <- c(1,2,5,8,9,2,10,8,6,22,34,56,76,84,100)
hist(a)
hist(log10(a))
binom.test(154,286)
binom.test(132,286)
binom.test(154,286, conf.level = 0.9)
binom.test(132,286, conf.level = 0.9)
binom.test(154,286, conf.level = 0.8)
binom.test(132,286, conf.level = 0.8)
binom.test(154,286, conf.level = 0.75)
binom.test(132,286, conf.level = 0.75)
library(chron)
library(lubridate)
library(dplyr)
library(ggplot2)
setwd("/Users/sabamundlay/Desktop/w2c_uchicago/ppcb_data/prepost_covid")
list.files()
setwd("/Users/sabamundlay/Desktop/w2c_uchicago/ppcb_data/prepost_covid")
list.files()
setwd("/Users/sabamundlay/Desktop/w2c_uchicago/ppcb_data/prepost_covid")
list.files()
#SATLUJ
industries <- read.csv("/Users/sabamundlay/Desktop/w2c_uchicago/ppcb_data_prepost_covid/satluj_industries.csv")
#SATLUJ
getwd()
setwd("/Users/sabamundlay/Desktop")
#SATLUJ
getwd()
setwd("/Users/sabamundlay/Desktop/w2c_uchicago/ppcb_data")
setwd("/Users/sabamundlay/Desktop/w2c_uchicago/ppcb_data/prepost_covid")
list.files()
#SATLUJ
getwd()
setwd("/Users/sabamundlay/Desktop/w2c_uchicago/ppcb_data/prepost_covid")
#SATLUJ
getwd()
library(chron)
library(lubridate)
library(dplyr)
library(ggplot2)
setwd("/Users/sabamundlay/Desktop/w2c_uchicago/ppcb_data/prepost_covid")
list.files()
getwd()
setwd("/Users/sabamundlay/Desktop/w2c_uchicago/ppcb_data/prepost_covid")
getwd()
setwd("/Users/sabamundlay/Desktop/w2c_uchicago/ppcb_data/prepost_covid")
list.files()
#Plot Flow Data
beas_flow <- read.csv("2019-2020flow_beas.csv")
library(chron) #for formatting timestamps
library(lubridate) #for extracting dates, years, and months
library(ggmap) #access google base maps using API key
library(ggplot2) #for visualising spatial data
library(dplyr) #for data frame manipulation
library(geosphere) #to calculate distances between two coordinates
library(ggpubr) #for tests of statistical significance
library(rstatix) #for tests of statistical significance
library(fields) #for spatial binning
library(viridis) #for custom color-scales
library(reshape) #for formatting ggplot2() visualisations
library(ggsn)
register_google(key = "") #replace this with your own API key from google
citation("ggmap") #for attribution guidelines
getwd()
#Load RJMN sensor data
setwd("/Users/sabamundlay/Desktop/w2c_uchicago/supratik_paper_code/r_code/GDVR/RJMN") #make sure to replace ... with correct, full filepath
getwd()
library(chron) #for formatting timestamps
library(lubridate) #for extracting dates, years, and months
library(ggmap) #access google base maps using API key
library(ggplot2) #for visualising spatial data
library(dplyr) #for data frame manipulation
library(geosphere) #to calculate distances between two coordinates
library(ggpubr) #for tests of statistical significance
library(rstatix) #for tests of statistical significance
library(fields) #for spatial binning
library(viridis) #for custom color-scales
library(reshape) #for formatting ggplot2() visualisations
rjmn_sens <- do.call("rbind", lapply(list.files(), read.csv, header = TRUE))
#format date
rjmn_sens$Date <- as.Date(rjmn_sens$Date, format = "%d/%m/%y", origin = "1900-01-01")
rjmn_sens$year <- year(rjmn_sens$Date)
rjmn_sens$mon <- month(rjmn_sens$Date)
names(rjmn_sens) <- c("date", "time", "temp", "pH", "pHmv", "orpmv", "ec", "ecabs", "res", "tds", "sal", "sigma",
"press", "do", "doppm", "turb", "nippm", "nimv", "amppm", "ammv", "chlarfu", "cdomrfu",
"tryprfu", "chlamg", "cdomppb", "trypppb", "lat", "long", "year", "mon")
rjmn_sens$time <- as.times(rjmn_sens$time)
a <- subset(rjmn_sens, year == 2017)
unique(a$date)
table(unique(a$date), a$mon)
table(a$mon, a$date)
table(a$date, a$mon)
a <- subset(rjmn_sens, year == 2018)
unique(a$date)
(unique(a$date)$mon)
table(a$date, a$mon)
a <- subset(rjmn_sens, year == 2019)
table(a$date, a$mon)
